#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: Build-OpenWrt-CI

on:
  push:
    branches: 
  #    - master
      - main
  # schedule:
  #   - cron: 0 20 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: 构建 OpenWrt 固件

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir

          df -h

      - name: 更新feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 生成配置文件
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:

          cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_GZIP=y
          # CONFIG_KERNEL_BUILD_USER="OpenWrt-CI"
          # CONFIG_KERNEL_BUILD_DOMAIN="Azure"
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_DEVICE_generic=y
          CONFIG_CGROUPFS_MOUNT_KERNEL_CGROUPS=y
          CONFIG_DOCKER_CGROUP_OPTIONS=y
          CONFIG_DOCKER_NET_MACVLAN=y
          CONFIG_DOCKER_OPTIONAL_FEATURES=y
          CONFIG_DOCKER_STO_EXT4=y
          CONFIG_KERNEL_CFQ_GROUP_IOSCHED=y
          CONFIG_KERNEL_CGROUP_DEVICE=y
          CONFIG_KERNEL_CGROUP_FREEZER=y
          CONFIG_KERNEL_CGROUP_HUGETLB=y
          CONFIG_KERNEL_CGROUP_NET_PRIO=y
          CONFIG_KERNEL_CGROUP_PERF=y
          CONFIG_KERNEL_EXT4_FS_POSIX_ACL=y
          CONFIG_KERNEL_EXT4_FS_SECURITY=y
          CONFIG_KERNEL_FS_POSIX_ACL=y
          CONFIG_KERNEL_HUGETLBFS=y
          CONFIG_KERNEL_HUGETLB_PAGE=y
          CONFIG_KERNEL_MEMCG_SWAP_ENABLED=y
          CONFIG_KERNEL_NET_CLS_CGROUP=y
          CONFIG_KERNEL_PERF_EVENTS=y
          CONFIG_KERNEL_TRANSPARENT_HUGEPAGE=y
          CONFIG_KERNEL_TRANSPARENT_HUGEPAGE_ALWAYS=y
          CONFIG_PACKAGE_btrfs-progs=y
          CONFIG_PACKAGE_cgroupfs-mount=y
          CONFIG_PACKAGE_containerd=y
          CONFIG_PACKAGE_docker=y
          CONFIG_PACKAGE_dockerd=y
          # CONFIG_PACKAGE_etherwake is not set
          CONFIG_PACKAGE_fdisk=y
          CONFIG_PACKAGE_frpc=y
          CONFIG_PACKAGE_golang=y
          CONFIG_PACKAGE_golang-src=y
          CONFIG_PACKAGE_ip6tables=y
          CONFIG_PACKAGE_kmod-br-netfilter=y
          CONFIG_PACKAGE_kmod-crypto-acompress=y
          CONFIG_PACKAGE_kmod-dummy=y
          CONFIG_PACKAGE_kmod-fs-btrfs=y
          CONFIG_PACKAGE_kmod-ip6tables=y
          CONFIG_PACKAGE_kmod-ipt-nat6=y
          CONFIG_PACKAGE_kmod-ipt-physdev=y
          CONFIG_PACKAGE_kmod-lib-lzo=y
          CONFIG_PACKAGE_kmod-lib-raid6=y
          CONFIG_PACKAGE_kmod-lib-xor=y
          CONFIG_PACKAGE_kmod-lib-zlib-deflate=y
          CONFIG_PACKAGE_kmod-lib-zstd=y
          # CONFIG_PACKAGE_kmod-nf-conntrack-netlink is not set
          CONFIG_PACKAGE_kmod-nf-ipt6=y
          CONFIG_PACKAGE_kmod-nf-ipvs=y
          CONFIG_PACKAGE_kmod-nf-log6=y
          CONFIG_PACKAGE_kmod-nf-nat6=y
          CONFIG_PACKAGE_kmod-nf-reject6=y
          CONFIG_PACKAGE_kmod-veth=y
          CONFIG_PACKAGE_liblzo=y
          CONFIG_PACKAGE_libseccomp=y
          # CONFIG_PACKAGE_luci-app-accesscontrol is not set
          CONFIG_PACKAGE_luci-app-docker=y
          CONFIG_PACKAGE_luci-app-frpc=y
          # CONFIG_PACKAGE_luci-app-nlbwmon is not set
          CONFIG_PACKAGE_luci-app-watchcat=y
          # CONFIG_PACKAGE_luci-app-wol is not set
          CONFIG_PACKAGE_luci-i18n-docker-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-frpc-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-watchcat-zh-cn=y
          CONFIG_PACKAGE_luci-lib-ipkg=y
          CONFIG_PACKAGE_mount-utils=y
          # CONFIG_PACKAGE_nlbwmon is not set
          CONFIG_PACKAGE_runc=y
          CONFIG_PACKAGE_tini=y
          CONFIG_PACKAGE_watchcat=y
          # CONFIG_PACKAGE_wol is not set
          CONFIG_TARGET_KERNEL_PARTSIZE=32
          EOF

          #
          # ===============================================================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.RELEASE_TOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
